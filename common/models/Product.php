<?php

namespace common\models;

use Yii;
use yii\db\Expression;
use yii\behaviors\TimestampBehavior;
use yii\web\UploadedFile;

/**
 * This is the model class for table "product".
 *
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $slug
 * @property string $meta
 * @property string $tags
 * @property integer $brand_id
 * @property string $sku
 * @property string $price
 * @property integer $quantity
 * @property string $image
 * @property integer $stock_status_id
 * @property string $date_publish
 * @property string $date_update
 */
class Product extends \yii\db\ActiveRecord
{
    public $meta_tag_title;
    public $meta_tag_description;
    public $meta_tag_keywords;
    public $category;
    public $file;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'product';
    }

    public function behaviors()
    {
        return [
            'Time' =>
                [
                    'class' => TimestampBehavior::className(),
                    'createdAtAttribute' => 'date_publish',
                    'updatedAtAttribute' => 'date_update',
                    'value' => new Expression('NOW()'),
                ],
            'Slug' => [
                'class' => 'Zelenin\yii\behaviors\Slug',
                'slugAttribute' => 'slug',
                'attribute' => 'name',
                // optional params
                'ensureUnique' => true,
                'replacement' => '-',
                'lowercase' => true,
                'immutable' => false,
                // If intl extension is enabled, see http://userguide.icu-project.org/transforms/general.
                'transliterateOptions' => 'Russian-Latin/BGN; Any-Latin; Latin-ASCII; NFD; [:Nonspacing Mark:] Remove; NFC;'
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['brand_id', 'quantity', 'stock_status_id', 'category'], 'integer'],
            [['price'], 'number'],
            [['date_publish', 'date_update', 'active'], 'safe'],
            [['slug', 'name'], 'string', 'max' => 100],
            [['file'], 'image'],
            [['tags', 'description'], 'safe'],
            [['meta', 'sku', 'image', 'meta_tag_description', 'meta_tag_keywords', 'meta_tag_title',], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'description' => 'Описание',
            'meta' => 'Meta',
            'tags' => 'Тэги',
            'brand_id' => 'Брэнд',
            'sku' => 'Артикул',
            'price' => 'Цена',
            'quantity' => 'Количество',
            'image' => 'Изображение',
            'stock_status_id' => 'Наличие',
            'category' => 'Категория',
            'date_publish' => 'Создано',
            'date_update' => 'Обновлено',
            'categoryName' => 'Категория',
        ];
    }

    public function getCategorys()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id'])
            ->viaTable('product_category', ['product_id' => 'id']);
    }

    public function beforeSave($insert)
    {
        if ($file = UploadedFile::getInstance($this, 'file')) {
            $this->image = strtotime('now') . "." . $file->extension;
            $file->saveAs(Yii::getAlias("@dir_images") . "/" . $this->image);
        }


        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        if ($this->image) {
            unlink(Yii::getAlias('@dir_images') . '/product/' . $this->image);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getCategoryName()
    {
        return $this->categorys->name;
    }

    public static function GetCategoryId($id)
    {
        $categoryId = ProductCategory::find()->select('category_id')->where(['product_id' => $id])->all();
        return $categoryId[0]->category_id;
    }

    public static function getImage($image)
    {
        return Yii::getAlias('@images') . '/product/' . $image;
    }

    public function getVariation()
    {

        return $this->hasMany(Variation::className(), ['id' => 'variation_id'])
            ->viaTable('product_variation', ['product_id' => 'id']);
    }

    public function getStatus()
    {
        return $this->hasOne(StockStatus::className(), ['id' => 'stock_status_id']);
    }

    public function getBrand()
    {
        return $this->hasOne(Brand::className(), ['id' => 'brand_id']);
    }

    public static function loadAttribute($id)
    {
        $all = [];
        $attributes = Yii::$app->db->createCommand('SELECT DISTINCT (pa.attribut_id), a.name FROM product_attribut pa LEFT JOIN attribute a ON  pa.attribut_id = a.id WHERE product_id = :product_id')
            ->bindValue(':product_id', $id)->queryAll();
        foreach ($attributes as $attribute) {
           $all[$attribute['name']] = implode(', ', Yii::$app->db->createCommand('select av.name from product_attribut pa LEFT JOIN attribute_value av ON pa.attribu_value_id = av.id WHERE pa.product_id = :product_id AND pa.attribut_id = :attribut_id')
                ->bindValue(':attribut_id', $attribute['attribut_id'])->bindValue(':product_id', $id)->queryColumn());
        }
        return $all;
    }

    public static function loadVariation ($id) {
        $variations = Yii::$app->db->createCommand('SELECT * FROM product_variation pv LEFT JOIN variation v ON pv.variation_id = v.id WHERE pv.product_id = :product_id')
            ->bindValue(':product_id', $id)->queryAll();
        return $variations;
    }
}
